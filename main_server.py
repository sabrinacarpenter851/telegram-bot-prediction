import telegram # –ó–º—ñ–Ω–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤–∏—Ö –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —ñ–º–µ–Ω
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
import logging
import os

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Render ---
# –í–ê–ñ–õ–ò–í–û: –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ Render —î –µ—Ñ–µ–º–µ—Ä–Ω–æ—é.
# –§–∞–π–ª cards.txt –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É/—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—ñ.
# –î–ª—è –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ Render –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
# 1. Render Disks (https://render.com/docs/disks) - –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
# 2. –ë–∞–∑—É –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, PostgreSQL –≤—ñ–¥ Render) - –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
CARDS_FILENAME = "cards.txt"
# –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Render Disk, —à–ª—è—Ö –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—à–∏–º, –Ω–∞–ø—Ä. "/var/data/cards.txt"

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ –ø–∞–º'—è—Ç—ñ - —Ç–µ–∂ —Å–∫–∏–¥–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
# –î–ª—è —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ —Å—Ç–∞–Ω—É –º–æ–∂–Ω–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ telegram.ext.PicklePersistence –∞–±–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö.
user_states = {}

# –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
def generate_prediction():
    predictions = [
        "‚ú® –í–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤ –Ω–∞–π–±–ª–∏–∂—á–æ–º—É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.",
        "üî• –ß–∞—Å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω –Ω–∞—Å—Ç–∞—î.",
        "üåû –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ –≤–∞–º —Ä–∞–¥—ñ—Å—Ç—å.",
        "üçÄ –í–∞—à–∞ —É–¥–∞—á–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –Ω–∞ –≤–∞—à—ñ–π —Å—Ç–æ—Ä–æ–Ω—ñ.",
        "üå± –ù–µ –±—ñ–π—Ç–µ—Å—è —Ä–æ–±–∏—Ç–∏ —Å–º—ñ–ª–∏–≤—ñ –∫—Ä–æ–∫–∏.",
        "üí™ –í–∞—à—ñ –∑—É—Å–∏–ª–ª—è —Å–∫–æ—Ä–æ –ø—Ä–∏–Ω–µ—Å—É—Ç—å –ø–ª–æ–¥–∏.",
        "üöÄ –°—å–æ–≥–æ–¥–Ω—ñ —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å.",
        "üèÜ –í–∞—à–∞ —Ä—ñ—à—É—á—ñ—Å—Ç—å —Å–∫–æ—Ä–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —É—Å–ø—ñ—Ö—É.",
        "üåü –ú–∞–π–±—É—Ç–Ω—î —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å –∑ –Ω–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.",
        "‚ö° –í–∞—à–∞ –µ–Ω–µ—Ä–≥—ñ—è –∑–∞—Ä–∞–∑ –Ω–∞ –≤–∏—Å–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—ó –Ω–∞ –ø–æ–≤–Ω—É.",
        "‚ù§Ô∏è –ú–æ—î —É–ª—é–±–ª–µ–Ω–µ —ñ–º'—è –Ü–ª–æ–Ω–∞",
        "üèÜ –ê–Ω–∞—Å—Ç–∞—Å—ñ—ó ‚Äî —Å–∞–º—ñ –∫–ª–∞—Å–Ω—ñ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—ñ!"
    ]
    return random.choice(predictions)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("üîÆ –ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")],
        [KeyboardButton("üìú –ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")], # –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_states[user_id] = "main_menu" # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    logger.info(f"User {user_id} started the bot.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:",
        reply_markup=get_main_menu_keyboard()
    )

# –§—É–Ω–∫—Ü—ñ—è "–ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è"
async def get_prediction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º, –¥–ª—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—ñ)
    # if user_states.get(user_id) != "main_menu":
    #     await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
    #     return

    prediction = generate_prediction()
    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True) # one_time_keyboard=True –º–æ–∂–µ –±—É—Ç–∏ –∑—Ä—É—á–Ω—ñ—à–µ –¥–ª—è "–ù–∞–∑–∞–¥"
    await update.message.reply_text(f"–í–∞—à–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è:\n\n{prediction}", reply_markup=reply_markup)
    # –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω —Ç—É—Ç, –±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–∞—Ö–æ—Ç—ñ—Ç–∏ —â–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å

# –§—É–Ω–∫—Ü—ñ—è "–ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è" (–∑–∞–ø–∏—Ç –∫–∞—Ä—Ç–∫–∏)
async def request_card_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_states[user_id] = "awaiting_card" # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    logger.info(f"User {user_id} requested offer, awaiting card.")
    # –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç—É—Ç, —á–µ–∫–∞—î–º–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ (14 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '02'):",
        # –ú–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∑–∞–≥–∞–ª—ñ –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ
        reply_markup=telegram.ReplyKeyboardRemove()
        # –ê–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        # reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True)
    )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = update.message.text.strip()
    current_state = user_states.get(user_id, "main_menu") # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –∞–±–æ –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

    logger.info(f"User {user_id} (state: {current_state}) sent text: {text}")

    # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
    if text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = "main_menu" # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É ---
    if current_state == "awaiting_card":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–∞—Ä—Ç–∫–∏
        if text.startswith("02") and len(text) == 14 and text.isdigit():
            logger.info(f"User {user_id} submitted potentially valid card: {text}")
            # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏)
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É/–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                file_dir = os.path.dirname(CARDS_FILENAME)
                if file_dir and not os.path.exists(file_dir):
                     os.makedirs(file_dir)
                     logger.info(f"Created directory: {file_dir}")
                if not os.path.exists(CARDS_FILENAME):
                    with open(CARDS_FILENAME, "w", encoding="utf-8") as f:
                        f.write("") # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª
                    logger.info(f"Created file: {CARDS_FILENAME}")


                # –ß–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–∞—Ä—Ç–æ–∫
                with open(CARDS_FILENAME, "r", encoding="utf-8") as f:
                    cards = {line.strip() for line in f if line.strip()} # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

                # –ó–∞–ø–∏—Å, —è–∫—â–æ –∫–∞—Ä—Ç–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∞
                if text not in cards:
                    with open(CARDS_FILENAME, "a", encoding="utf-8") as f:
                        f.write(f"{text}\n")
                    logger.info(f"User {user_id} card {text} saved to {CARDS_FILENAME}")
                else:
                    logger.info(f"User {user_id} card {text} already exists in {CARDS_FILENAME}")

                # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
                user_states[user_id] = "main_menu"
                await update.message.reply_text(
                    "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∫–∞—Ä—Ç–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ.\n\n–û—Å—å –≤–∞—à–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:\nhttps://instagram.com/romankuryn",
                    reply_markup=get_main_menu_keyboard() # –í—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                )

            except Exception as e:
                logger.error(f"Error handling card file for user {user_id}: {e}", exc_info=True)
                await update.message.reply_text(
                    "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                    reply_markup=get_main_menu_keyboard()
                )
                user_states[user_id] = "main_menu" # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –º–µ–Ω—é –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

        else:
            logger.warning(f"User {user_id} submitted invalid card format: {text}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç–∫–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ 14 —Ü–∏—Ñ—Ä, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ '02'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîô –ù–∞–∑–∞–¥'.",
                 # –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ awaiting_card
                 # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å—é–¥–∏, —è–∫—â–æ –ø—Ä–∏–±—Ä–∞–ª–∏ —ó—ó —Ä–∞–Ω—ñ—à–µ
                 reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True)
            )

    elif current_state == "main_menu":
        if text == "üîÆ –ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è":
            await get_prediction_handler(update, context)
        elif text == "üìú –ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è": # –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            await request_card_handler(update, context)
        else:
            # –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
            await update.message.reply_text(
                "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É ü§î. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ /start.",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        # –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Å—Ç–∞–Ω—É (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Ç—Ä–∞–ø–ª—è—Ç–∏—Å—è, –∞–ª–µ –ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
        logger.warning(f"User {user_id} is in unknown state: {current_state}. Resetting to main_menu.")
        user_states[user_id] = "main_menu"
        await update.message.reply_text(
            "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )


# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Logg—É—î –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–∏—á–∏–Ω–µ–Ω—ñ Updates."""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)

    # –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    # if isinstance(update, Update) and update.effective_message:
    #     try:
    #         await update.effective_message.reply_text("–û–π, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ü–∏–º!")
    #     except Exception as e:
    #         logger.error(f"Failed to send error message to user: {e}")


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.critical("–ü–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application
    application = Application.builder().token(bot_token).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫/—Ç–µ–∫—Å—Ç—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("Starting bot polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES) # –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω—å

if __name__ == '__main__':
    main()