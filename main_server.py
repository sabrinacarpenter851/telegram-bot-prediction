import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_states = {}

# –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
def generate_prediction():
    predictions = [
        "‚ú® –í–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤ –Ω–∞–π–±–ª–∏–∂—á–æ–º—É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.",
        "üî• –ß–∞—Å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω –Ω–∞—Å—Ç–∞—î.",
        "üåû –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ –≤–∞–º —Ä–∞–¥—ñ—Å—Ç—å.",
        "üçÄ –í–∞—à–∞ —É–¥–∞—á–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –Ω–∞ –≤–∞—à—ñ–π —Å—Ç–æ—Ä–æ–Ω—ñ.",
        "üå± –ù–µ –±—ñ–π—Ç–µ—Å—è —Ä–æ–±–∏—Ç–∏ —Å–º—ñ–ª–∏–≤—ñ –∫—Ä–æ–∫–∏.",
        "üí™ –í–∞—à—ñ –∑—É—Å–∏–ª–ª—è —Å–∫–æ—Ä–æ –ø—Ä–∏–Ω–µ—Å—É—Ç—å –ø–ª–æ–¥–∏.",
        "üöÄ –°—å–æ–≥–æ–¥–Ω—ñ —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å.",
        "üèÜ –í–∞—à–∞ —Ä—ñ—à—É—á—ñ—Å—Ç—å —Å–∫–æ—Ä–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —É—Å–ø—ñ—Ö—É.",
        "üåü –ú–∞–π–±—É—Ç–Ω—î —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å –∑ –Ω–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.",
        "‚ö° –í–∞—à–∞ –µ–Ω–µ—Ä–≥—ñ—è –∑–∞—Ä–∞–∑ –Ω–∞ –≤–∏—Å–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—ó –Ω–∞ –ø–æ–≤–Ω—É.",
        "‚ù§Ô∏è –ú–æ—î —É–ª—é–±–ª–µ–Ω–µ —ñ–º'—è –Ü–ª–æ–Ω–∞",
        "üèÜ –ê–Ω–∞—Å—Ç–∞—Å—ñ—ó ‚Äî —Å–∞–º—ñ –∫–ª–∞—Å–Ω—ñ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—ñ!"
    ]
    return random.choice(predictions)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_states[user_id] = "main_menu"

    keyboard = [
        [KeyboardButton("üîÆ –ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")],
        [KeyboardButton("üí° –ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è "–ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è"
async def get_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    prediction = generate_prediction()
    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–í–∞—à–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è: {prediction}", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = "main_menu"
        keyboard = [
            [KeyboardButton("üîÆ –ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")],
            [KeyboardButton("üìú –ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:", reply_markup=reply_markup)
        return

    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    if user_states.get(user_id) == "awaiting_card":
        if text.startswith("02") and len(text) == 14 and text.isdigit():
            # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏)
            filename = "cards.txt"
            if not os.path.exists(filename):
                with open(filename, "w", encoding="utf-8") as f:
                    f.write("")

            with open(filename, "r", encoding="utf-8") as f:
                cards = f.read().splitlines()

            if text not in cards:
                with open(filename, "a", encoding="utf-8") as f:
                    f.write(f"{text}\n")

            user_states[user_id] = "main_menu"
            keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–î—è–∫—É—î–º–æ!\n–û—Å—å —Ç–≤–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: https://instagram.com/romankuryn", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏. –ú–∞—î –±—É—Ç–∏ 14 —Ü–∏—Ñ—Ä.")
    else:
        # –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
        if text == "üîÆ –ú–æ—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è":
            await get_prediction(update, context)
        elif text == "üìú –ú–æ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è":
            user_states[user_id] = "awaiting_card"
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ (14 —Ü–∏—Ñ—Ä):")
        else:
            await update.message.reply_text("–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É. –ù–∞—Ç–∏—Å–Ω–∏ /start –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –¥–æ–¥–∞—Ç–∫–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token(bot_token).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
